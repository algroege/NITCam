%% About defineNITCam.m
% This file defines the MATLAB interface to the library |NITCam|.
%
% Commented sections represent C++ functionality that MATLAB cannot automatically define. To include
% functionality, uncomment a section and provide values for <SHAPE>, <DIRECTION>, etc. For more
% information, see helpview(fullfile(docroot,'matlab','helptargets.map'),'cpp_define_interface') to "Define MATLAB Interface for C++ Library".



%% Setup
% Do not edit this setup section.
function libDef = defineNITCam()
libDef = clibgen.LibraryDefinition("NITCamData.xml");

%% OutputFolder and Libraries 
libDef.OutputFolder = "D:\GitHub\NITCam\matlab\Output";
libDef.Libraries = "D:\GitHub\NITCam\src\lib\x64\NITLibrary_x64-3.2.1.lib";

%% C++ class |UsbConfigObserver| with MATLAB name |clib.NITCam.UsbConfigObserver| 
UsbConfigObserverDefinition = addClass(libDef, "UsbConfigObserver", "MATLABName", "clib.NITCam.UsbConfigObserver", ...
    "Description", "clib.NITCam.UsbConfigObserver    Representation of C++ class UsbConfigObserver." + newline + ...
    "As soon as it is connected to the NITDevice, onParamRangeChanged is called for each parameter of the device"); % Modify help description values as needed.

%% C++ class constructor for C++ class |UsbConfigObserver| 
% C++ Signature: UsbConfigObserver::UsbConfigObserver()

UsbConfigObserverConstructor1Definition = addConstructor(UsbConfigObserverDefinition, ...
    "UsbConfigObserver::UsbConfigObserver()", ...
    "Description", "clib.NITCam.UsbConfigObserver Constructor of C++ class UsbConfigObserver."); % Modify help description values as needed.
validate(UsbConfigObserverConstructor1Definition);

%% C++ class method |DisplayNewFrame| for C++ class |UsbConfigObserver| 
% C++ Signature: void UsbConfigObserver::DisplayNewFrame(bool b)

DisplayNewFrameDefinition = addMethod(UsbConfigObserverDefinition, ...
    "void UsbConfigObserver::DisplayNewFrame(bool b)", ...
    "MATLABName", "DisplayNewFrame", ...
    "Description", "DisplayNewFrame Method of C++ class UsbConfigObserver."); % Modify help description values as needed.
defineArgument(DisplayNewFrameDefinition, "b", "logical");
validate(DisplayNewFrameDefinition);

%% C++ class |NITCam| with MATLAB name |clib.NITCam.NITCam| 
NITCamDefinition = addClass(libDef, "NITCam", "MATLABName", "clib.NITCam.NITCam", ...
    "Description", "clib.NITCam.NITCam    Representation of C++ class NITCam." + newline + ...
    "This is the main Interface Class to handle the shitty NIT Camera", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "All the interfaces you desire"); % Modify help description values as needed.

%% C++ class constructor for C++ class |NITCam| 
% C++ Signature: NITCam::NITCam()

NITCamConstructor1Definition = addConstructor(NITCamDefinition, ...
    "NITCam::NITCam()", ...
    "Description", "clib.NITCam.NITCam Constructor of C++ class NITCam."); % Modify help description values as needed.
validate(NITCamConstructor1Definition);

%% C++ class method |activateTriggerMode| for C++ class |NITCam| 
% C++ Signature: void NITCam::activateTriggerMode(bool state)

activateTriggerModeDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::activateTriggerMode(bool state)", ...
    "MATLABName", "activateTriggerMode", ...
    "Description", "activateTriggerMode Method of C++ class NITCam."); % Modify help description values as needed.
defineArgument(activateTriggerModeDefinition, "state", "logical");
validate(activateTriggerModeDefinition);

%% C++ class method |captureFrames| for C++ class |NITCam| 
% C++ Signature: bool NITCam::captureFrames(std::string const saveDirectory,std::string const fileName,std::string const fileType,bool gatedMode,int bitMode,double inputTriggerDelay,double exposureTime,int numOfFramesToCapture)

captureFramesDefinition = addMethod(NITCamDefinition, ...
    "bool NITCam::captureFrames(std::string const saveDirectory,std::string const fileName,std::string const fileType,bool gatedMode,int bitMode,double inputTriggerDelay,double exposureTime,int numOfFramesToCapture)", ...
    "MATLABName", "captureFrames", ...
    "Description", "captureFrames Method of C++ class NITCam." + newline + ...
    "Main function to capture frames", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "int bitMode: 0 = 14-bit, 1 = 8-bit manual gain control, 2 = 8-bit automatic gain control"); % Modify help description values as needed.
defineArgument(captureFramesDefinition, "saveDirectory", "string");
defineArgument(captureFramesDefinition, "fileName", "string");
defineArgument(captureFramesDefinition, "fileType", "string");
defineArgument(captureFramesDefinition, "gatedMode", "logical");
defineArgument(captureFramesDefinition, "bitMode", "int32");
defineArgument(captureFramesDefinition, "inputTriggerDelay", "double");
defineArgument(captureFramesDefinition, "exposureTime", "double");
defineArgument(captureFramesDefinition, "numOfFramesToCapture", "int32");
defineOutput(captureFramesDefinition, "RetVal", "logical");
validate(captureFramesDefinition);

%% C++ class method |setMgcMinMax| for C++ class |NITCam| 
% C++ Signature: void NITCam::setMgcMinMax(unsigned short min,unsigned short max)

setMgcMinMaxDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::setMgcMinMax(unsigned short min,unsigned short max)", ...
    "MATLABName", "setMgcMinMax", ...
    "Description", "setMgcMinMax Method of C++ class NITCam."); % Modify help description values as needed.
defineArgument(setMgcMinMaxDefinition, "min", "uint16");
defineArgument(setMgcMinMaxDefinition, "max", "uint16");
validate(setMgcMinMaxDefinition);

%% C++ class method |startLiveImage| for C++ class |NITCam| 
% C++ Signature: void NITCam::startLiveImage()

startLiveImageDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::startLiveImage()", ...
    "MATLABName", "startLiveImage", ...
    "Description", "startLiveImage Method of C++ class NITCam."); % Modify help description values as needed.
validate(startLiveImageDefinition);

%% C++ class method |startMgcLiveImage| for C++ class |NITCam| 
% C++ Signature: void NITCam::startMgcLiveImage()

startMgcLiveImageDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::startMgcLiveImage()", ...
    "MATLABName", "startMgcLiveImage", ...
    "Description", "startMgcLiveImage Method of C++ class NITCam."); % Modify help description values as needed.
validate(startMgcLiveImageDefinition);

%% C++ class method |stopLiveImage| for C++ class |NITCam| 
% C++ Signature: void NITCam::stopLiveImage()

stopLiveImageDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::stopLiveImage()", ...
    "MATLABName", "stopLiveImage", ...
    "Description", "stopLiveImage Method of C++ class NITCam."); % Modify help description values as needed.
validate(stopLiveImageDefinition);

%% C++ class method |setNucDirectory| for C++ class |NITCam| 
% C++ Signature: void NITCam::setNucDirectory(std::string const nucFileDirectory)

setNucDirectoryDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::setNucDirectory(std::string const nucFileDirectory)", ...
    "MATLABName", "setNucDirectory", ...
    "Description", "setNucDirectory Method of C++ class NITCam."); % Modify help description values as needed.
defineArgument(setNucDirectoryDefinition, "nucFileDirectory", "string");
validate(setNucDirectoryDefinition);

%% C++ class method |setNucFile| for C++ class |NITCam| 
% C++ Signature: void NITCam::setNucFile(std::string const nucFileDirectory)

setNucFileDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::setNucFile(std::string const nucFileDirectory)", ...
    "MATLABName", "setNucFile", ...
    "Description", "setNucFile Method of C++ class NITCam."); % Modify help description values as needed.
defineArgument(setNucFileDefinition, "nucFileDirectory", "string");
validate(setNucFileDefinition);

%% C++ class method |setBprDirectory| for C++ class |NITCam| 
% C++ Signature: void NITCam::setBprDirectory(std::string const bprFileDirectory)

setBprDirectoryDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::setBprDirectory(std::string const bprFileDirectory)", ...
    "MATLABName", "setBprDirectory", ...
    "Description", "setBprDirectory Method of C++ class NITCam."); % Modify help description values as needed.
defineArgument(setBprDirectoryDefinition, "bprFileDirectory", "string");
validate(setBprDirectoryDefinition);

%% C++ class method |setBprFile| for C++ class |NITCam| 
% C++ Signature: void NITCam::setBprFile(std::string const bprFileDirectory)

setBprFileDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::setBprFile(std::string const bprFileDirectory)", ...
    "MATLABName", "setBprFile", ...
    "Description", "setBprFile Method of C++ class NITCam."); % Modify help description values as needed.
defineArgument(setBprFileDefinition, "bprFileDirectory", "string");
validate(setBprFileDefinition);

%% C++ class method |activateNuc| for C++ class |NITCam| 
% C++ Signature: void NITCam::activateNuc(bool activate)

activateNucDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::activateNuc(bool activate)", ...
    "MATLABName", "activateNuc", ...
    "Description", "activateNuc Method of C++ class NITCam."); % Modify help description values as needed.
defineArgument(activateNucDefinition, "activate", "logical");
validate(activateNucDefinition);

%% C++ class method |activateBpr| for C++ class |NITCam| 
% C++ Signature: void NITCam::activateBpr(bool activate)

activateBprDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::activateBpr(bool activate)", ...
    "MATLABName", "activateBpr", ...
    "Description", "activateBpr Method of C++ class NITCam."); % Modify help description values as needed.
defineArgument(activateBprDefinition, "activate", "logical");
validate(activateBprDefinition);

%% C++ class method |nucActive| for C++ class |NITCam| 
% C++ Signature: void NITCam::nucActive()

nucActiveDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::nucActive()", ...
    "MATLABName", "nucActive", ...
    "Description", "nucActive Method of C++ class NITCam."); % Modify help description values as needed.
validate(nucActiveDefinition);

%% C++ class method |bprActive| for C++ class |NITCam| 
% C++ Signature: void NITCam::bprActive()

bprActiveDefinition = addMethod(NITCamDefinition, ...
    "void NITCam::bprActive()", ...
    "MATLABName", "bprActive", ...
    "Description", "bprActive Method of C++ class NITCam."); % Modify help description values as needed.
validate(bprActiveDefinition);

%% C++ class public data member |config_observer| for C++ class |NITCam| 
% C++ Signature: UsbConfigObserver NITCam::config_observer

addProperty(NITCamDefinition, "config_observer", "clib.NITCam.UsbConfigObserver", ...
    "Description", "clib.NITCam.UsbConfigObserver    Data member of C++ class NITCam."); % Modify help description values as needed.

%% C++ class public data member |dev| for C++ class |NITCam| 
% C++ Signature: NITLibrary::NITDevice * NITCam::dev

%addProperty(NITCamDefinition, "dev", "clib.NITCam.NITLibrary.NITDevice", <SHAPE>, ... % <MLTYPE> can be "clib.NITCam.NITLibrary.NITDevice", or "clib.array.NITCam.NITLibrary.NITDevice"
%    "Description", "clib.NITCam.NITLibrary.NITDevice    Data member of C++ class NITCam."); % Modify help description values as needed.

%% C++ class public data member |directory| for C++ class |NITCam| 
% C++ Signature: std::string NITCam::directory

addProperty(NITCamDefinition, "directory", "string", ...
    "Description", "string    Data member of C++ class NITCam."); % Modify help description values as needed.

%% C++ function |ConfigureDevice| with MATLAB name |clib.NITCam.ConfigureDevice|
% C++ Signature: void ConfigureDevice(NITLibrary::NITDevice * dev)

%ConfigureDeviceDefinition = addFunction(libDef, ...
%    "void ConfigureDevice(NITLibrary::NITDevice * dev)", ...
%    "MATLABName", "clib.NITCam.ConfigureDevice", ...
%    "Description", "clib.NITCam.ConfigureDevice Representation of C++ function ConfigureDevice."); % Modify help description values as needed.
%defineArgument(ConfigureDeviceDefinition, "dev", "clib.NITCam.NITLibrary.NITDevice", "input", <SHAPE>); % <MLTYPE> can be "clib.NITCam.NITLibrary.NITDevice", or "clib.array.NITCam.NITLibrary.NITDevice"
%validate(ConfigureDeviceDefinition);

%% C++ function |CreateDevice| with MATLAB name |clib.NITCam.CreateDevice|
% C++ Signature: NITLibrary::NITDevice * CreateDevice()

%CreateDeviceDefinition = addFunction(libDef, ...
%    "NITLibrary::NITDevice * CreateDevice()", ...
%    "MATLABName", "clib.NITCam.CreateDevice", ...
%    "Description", "clib.NITCam.CreateDevice Representation of C++ function CreateDevice."); % Modify help description values as needed.
%defineOutput(CreateDeviceDefinition, "RetVal", "clib.NITCam.NITLibrary.NITDevice", <SHAPE>);
%validate(CreateDeviceDefinition);

%% C++ enumeration |NITLibrary::ConnectorType| with MATLAB name |clib.NITCam.NITLibrary.ConnectorType| 
addEnumeration(libDef, "NITLibrary::ConnectorType", "int32",...
    [...
      "NO_CONNECTOR",...  % 0
      "USB_2",...  % 1
      "USB_3",...  % 2
      "GIGE",...  % 4
      "CL_DALSA",...  % 8
      "CL_IMPERX",...  % 16
    ],...
    "MATLABName", "clib.NITCam.NITLibrary.ConnectorType", ...
    "Description", "clib.NITCam.NITLibrary.ConnectorType    Representation of C++ enumeration NITLibrary::ConnectorType.", ...
    "EnumerantDescriptions", ...
    [...
      "",...  % NO_CONNECTOR
      "USB 2.0 connector.",...  % USB_2
      "USB 3.0 connector.",...  % USB_3
      "",...  % GIGE
      "",...  % CL_DALSA
      "",...  % CL_IMPERX
    ]); % Modify help description values as needed.

%% C++ class |NITLibrary::NITConfigObserver| with MATLAB name |clib.NITCam.NITLibrary.NITConfigObserver| 
NITConfigObserverDefinition = addClass(libDef, "NITLibrary::NITConfigObserver", "MATLABName", "clib.NITCam.NITLibrary.NITConfigObserver", ...
    "Description", "clib.NITCam.NITLibrary.NITConfigObserver    Representation of C++ class NITLibrary::NITConfigObserver." + newline + ...
    "Permits to the user of the SDK to be informed of changes in an USB camera", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "This class is pure virtual.\n" + newline + ...
    "To receive informations about the camera changes, you have to derive from this class and overload the functions.\n" + newline + ...
    "The derived class object must then be connected to a NITDevice." + newline + ...
    "" + newline + ...
    "As soon a the object is connected to a NITDevice, onParamRangeChanged is called for each parameter of the camera.\n" + newline + ...
    "This permit to obtain the name of all supported parameter, there current range and current value.\n"); % Modify help description values as needed.

%% C++ class |NITLibrary::NITDevice| with MATLAB name |clib.NITCam.NITLibrary.NITDevice| 
NITDeviceDefinition = addClass(libDef, "NITLibrary::NITDevice", "MATLABName", "clib.NITCam.NITLibrary.NITDevice", ...
    "Description", "clib.NITCam.NITLibrary.NITDevice    Representation of C++ class NITLibrary::NITDevice." + newline + ...
    "Main class which describe the active camera", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Thrue this class, you can set and get the camera parameters and initiate the capture of frames.\n" + newline + ...
    "You can't instantiate directly this class. Instead, NITManager will return an instance of this class when you call one of the open functions."); % Modify help description values as needed.

%% C++ class method |sensorWidth| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: unsigned int NITLibrary::NITDevice::sensorWidth() const

sensorWidthDefinition = addMethod(NITDeviceDefinition, ...
    "unsigned int NITLibrary::NITDevice::sensorWidth() const", ...
    "MATLABName", "sensorWidth", ...
    "Description", "sensorWidth Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the sensor width"); % Modify help description values as needed.
defineOutput(sensorWidthDefinition, "RetVal", "uint32");
validate(sensorWidthDefinition);

%% C++ class method |sensorHeight| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: unsigned int NITLibrary::NITDevice::sensorHeight() const

sensorHeightDefinition = addMethod(NITDeviceDefinition, ...
    "unsigned int NITLibrary::NITDevice::sensorHeight() const", ...
    "MATLABName", "sensorHeight", ...
    "Description", "sensorHeight Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the type of the connector on which the camera is connected.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Can return one of USB_2, USB_3 or GIGE" + newline + ...
    "  This is the connector on the host side, notably for USB cameras if an USB3 camera is connected to an USB2 connector on the host side," + newline + ...
    "  this function will return USB_2."); % Modify help description values as needed.
defineOutput(sensorHeightDefinition, "RetVal", "uint32");
validate(sensorHeightDefinition);

%% C++ class method |connectorType| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: NITLibrary::ConnectorType NITLibrary::NITDevice::connectorType() const

connectorTypeDefinition = addMethod(NITDeviceDefinition, ...
    "NITLibrary::ConnectorType NITLibrary::NITDevice::connectorType() const", ...
    "MATLABName", "connectorType", ...
    "Description", "connectorType Method of C++ class NITLibrary::NITDevice."); % Modify help description values as needed.
defineOutput(connectorTypeDefinition, "RetVal", "clib.NITCam.NITLibrary.ConnectorType");
validate(connectorTypeDefinition);

%% C++ class method |connectorNumber| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: unsigned int NITLibrary::NITDevice::connectorNumber() const

connectorNumberDefinition = addMethod(NITDeviceDefinition, ...
    "unsigned int NITLibrary::NITDevice::connectorNumber() const", ...
    "MATLABName", "connectorNumber", ...
    "Description", "connectorNumber Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the commercial name of the camera."); % Modify help description values as needed.
defineOutput(connectorNumberDefinition, "RetVal", "uint32");
validate(connectorNumberDefinition);

%% C++ class method |commercialName| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: std::string NITLibrary::NITDevice::commercialName() const

commercialNameDefinition = addMethod(NITDeviceDefinition, ...
    "std::string NITLibrary::NITDevice::commercialName() const", ...
    "MATLABName", "commercialName", ...
    "Description", "commercialName Method of C++ class NITLibrary::NITDevice."); % Modify help description values as needed.
defineOutput(commercialNameDefinition, "RetVal", "string");
validate(commercialNameDefinition);

%% C++ class method |modelId| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: std::string NITLibrary::NITDevice::modelId() const

modelIdDefinition = addMethod(NITDeviceDefinition, ...
    "std::string NITLibrary::NITDevice::modelId() const", ...
    "MATLABName", "modelId", ...
    "Description", "modelId Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the sensor model of the camera. like NSC1003"); % Modify help description values as needed.
defineOutput(modelIdDefinition, "RetVal", "string");
validate(modelIdDefinition);

%% C++ class method |firmwareVersion| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: std::string NITLibrary::NITDevice::firmwareVersion() const

firmwareVersionDefinition = addMethod(NITDeviceDefinition, ...
    "std::string NITLibrary::NITDevice::firmwareVersion() const", ...
    "MATLABName", "firmwareVersion", ...
    "Description", "firmwareVersion Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the FGPA firmware version of the camera."); % Modify help description values as needed.
defineOutput(firmwareVersionDefinition, "RetVal", "string");
validate(firmwareVersionDefinition);

%% C++ class method |serialNumber| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: std::string NITLibrary::NITDevice::serialNumber() const

serialNumberDefinition = addMethod(NITDeviceDefinition, ...
    "std::string NITLibrary::NITDevice::serialNumber() const", ...
    "MATLABName", "serialNumber", ...
    "Description", "serialNumber Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the serial number of the camera."); % Modify help description values as needed.
defineOutput(serialNumberDefinition, "RetVal", "string");
validate(serialNumberDefinition);

%% C++ class method |setNucDirectory| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::setNucDirectory(std::string const & dir_path,bool is_bpr_path = 1)

setNucDirectoryDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::setNucDirectory(std::string const & dir_path,bool is_bpr_path = 1)", ...
    "MATLABName", "setNucDirectory", ...
    "Description", "setNucDirectory Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Set the directory containing the NUC files", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The path(if not empty) must point to a writeable directory containing a directory named 'NUC'.\n" + newline + ...
    " If directory path is valid, the automatic nuc interpolation is activated.\n" + newline + ...
    " If directory path is empty, the nuc filtering is deactivated.\n" + newline + ...
    " If is_bpr_path is true, the bad pixel recovery is also activated with the files contained in this path."); % Modify help description values as needed.
defineArgument(setNucDirectoryDefinition, "dir_path", "string", "input", "Description", "dir_path path to the directory");
defineArgument(setNucDirectoryDefinition, "is_bpr_path", "logical", "Description", "is_bpr_path true if the directory contain also the bpr files");
validate(setNucDirectoryDefinition);

%% C++ class method |setNucFile| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::setNucFile(std::string const & file_path)

setNucFileDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::setNucFile(std::string const & file_path)", ...
    "MATLABName", "setNucFile", ...
    "Description", "setNucFile Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Set a NUC file", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The path(if not empty) must point to a valid NUC file.\n" + newline + ...
    " The nuc interpolation is deactivated and the NUC in this file is applied regardless the parameter changes.\n" + newline + ...
    " If file_path is empty, the nuc filtering is deactivated."); % Modify help description values as needed.
defineArgument(setNucFileDefinition, "file_path", "string", "input", "Description", "file_path path to the NUC file");
validate(setNucFileDefinition);

%% C++ class method |setBprDirectory| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::setBprDirectory(std::string const & dir_path)

setBprDirectoryDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::setBprDirectory(std::string const & dir_path)", ...
    "MATLABName", "setBprDirectory", ...
    "Description", "setBprDirectory Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Set the directory containing the BPR files", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The path(if not empty) must point to a directory containing a directory named 'NUC'.\n" + newline + ...
    " If directory path is valid, the automatic bad pixel correction is activated.\n" + newline + ...
    " If directory path is empty, the bad pixel correction filtering is deactivated."); % Modify help description values as needed.
defineArgument(setBprDirectoryDefinition, "dir_path", "string", "input", "Description", "dir_path path to the directory");
validate(setBprDirectoryDefinition);

%% C++ class method |setBprFile| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::setBprFile(std::string const & file_path)

setBprFileDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::setBprFile(std::string const & file_path)", ...
    "MATLABName", "setBprFile", ...
    "Description", "setBprFile Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Set a BPR file", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The path(if not empty) must point to a valid BPR file.\n" + newline + ...
    " The bad pixel correction in this file is applied regardless the parameter changes.\n" + newline + ...
    " If file_path is empty, the bad pixel correction is deactivated."); % Modify help description values as needed.
defineArgument(setBprFileDefinition, "file_path", "string", "input", "Description", "file_path path to the BPR file");
validate(setBprFileDefinition);

%% C++ class method |activateNuc| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::activateNuc(bool activate = 1)

activateNucDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::activateNuc(bool activate = 1)", ...
    "MATLABName", "activateNuc", ...
    "Description", "activateNuc Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Activate/Deactivate the nuc processing", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "\attention The nuc processing is only activated if a valid nuc path or nuc file exists."); % Modify help description values as needed.
defineArgument(activateNucDefinition, "activate", "logical", "Description", "activate if true try to activate the nuc processing, else deactivate the nuc processing");
validate(activateNucDefinition);

%% C++ class method |activateBpr| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::activateBpr(bool activate = 1)

activateBprDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::activateBpr(bool activate = 1)", ...
    "MATLABName", "activateBpr", ...
    "Description", "activateBpr Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Activate/Deactivate the bpr processing", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "\attention The bpr processing is only activated if a valid bpr path or bpr file exists."); % Modify help description values as needed.
defineArgument(activateBprDefinition, "activate", "logical", "Description", "activate if true try to activate the bpr processing, else deactivate the bpr processing");
validate(activateBprDefinition);

%% C++ class method |nucActive| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: bool NITLibrary::NITDevice::nucActive() const

nucActiveDefinition = addMethod(NITDeviceDefinition, ...
    "bool NITLibrary::NITDevice::nucActive() const", ...
    "MATLABName", "nucActive", ...
    "Description", "nucActive Method of C++ class NITLibrary::NITDevice." + newline + ...
    "return the state of the nuc processing", ...
    "DetailedDescription", "This content is from the external library documentation."); % Modify help description values as needed.
defineOutput(nucActiveDefinition, "RetVal", "logical", "Description", "true if nuc processing active, else return false.");
validate(nucActiveDefinition);

%% C++ class method |bprActive| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: bool NITLibrary::NITDevice::bprActive() const

bprActiveDefinition = addMethod(NITDeviceDefinition, ...
    "bool NITLibrary::NITDevice::bprActive() const", ...
    "MATLABName", "bprActive", ...
    "Description", "bprActive Method of C++ class NITLibrary::NITDevice." + newline + ...
    "return the state of the bpr processing", ...
    "DetailedDescription", "This content is from the external library documentation."); % Modify help description values as needed.
defineOutput(bprActiveDefinition, "RetVal", "logical", "Description", "true if bpr processing active, else return false.");
validate(bprActiveDefinition);

%% C++ class method |setFps| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::setFps(double new_fps)

setFpsDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::setFps(double new_fps)", ...
    "MATLABName", "setFps", ...
    "Description", "setFps Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Set the frame rate", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Set the nearest frame rate possible in the range delimited by NITDevice::minFps() and NITDevice::maxFps()"); % Modify help description values as needed.
defineArgument(setFpsDefinition, "new_fps", "double", "Description", "new_fps");
validate(setFpsDefinition);

%% C++ class method |fps| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: double NITLibrary::NITDevice::fps() const

fpsDefinition = addMethod(NITDeviceDefinition, ...
    "double NITLibrary::NITDevice::fps() const", ...
    "MATLABName", "fps", ...
    "Description", "fps Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the current frame rate"); % Modify help description values as needed.
defineOutput(fpsDefinition, "RetVal", "double");
validate(fpsDefinition);

%% C++ class method |minFps| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: double NITLibrary::NITDevice::minFps() const

minFpsDefinition = addMethod(NITDeviceDefinition, ...
    "double NITLibrary::NITDevice::minFps() const", ...
    "MATLABName", "minFps", ...
    "Description", "minFps Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the currently minimum frame rate"); % Modify help description values as needed.
defineOutput(minFpsDefinition, "RetVal", "double");
validate(minFpsDefinition);

%% C++ class method |maxFps| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: double NITLibrary::NITDevice::maxFps() const

maxFpsDefinition = addMethod(NITDeviceDefinition, ...
    "double NITLibrary::NITDevice::maxFps() const", ...
    "MATLABName", "maxFps", ...
    "Description", "maxFps Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the currently maximum frame rate"); % Modify help description values as needed.
defineOutput(maxFpsDefinition, "RetVal", "double");
validate(maxFpsDefinition);

%% C++ class method |setRoi| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::setRoi(unsigned int offset_x,unsigned int offset_y,unsigned int width,unsigned int height)

setRoiDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::setRoi(unsigned int offset_x,unsigned int offset_y,unsigned int width,unsigned int height)", ...
    "MATLABName", "setRoi", ...
    "Description", "setRoi Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Set the position and dimensions of the returned frames", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "This function permit to set the region of interest atomically." + newline + ...
    " When you call setParamValueOf with 'Number of lines', the SDK sum this new value with the current value of 'First line'.\n" + newline + ...
    " If this sum is above the sensor height, an exception is thrown. This can lead to tricky situations." + newline + ...
    " Let say sensor height is 512 and the current 'First line' is 10 and the current 'Number of lines' is 502.\n" + newline + ...
    " If you want to set 'Number of Lines to 507, you first have to set 'First line' below 6 and then set 'Number of lines' to 507.\n" + newline + ...
    " If you do it the other side, the SDK will throw." + newline + ...
    "" + newline + ...
    " setRoi permit to avoid this situation. The sum is made with the parameters passed to the function."); % Modify help description values as needed.
defineArgument(setRoiDefinition, "offset_x", "uint32", "Description", "offset_x, offset_y, width, height roi elements.");
defineArgument(setRoiDefinition, "offset_y", "uint32");
defineArgument(setRoiDefinition, "width", "uint32");
defineArgument(setRoiDefinition, "height", "uint32");
validate(setRoiDefinition);

%% C++ class method |paramValueOf| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: double NITLibrary::NITDevice::paramValueOf(std::string const & paramName) const

paramValueOfDefinition = addMethod(NITDeviceDefinition, ...
    "double NITLibrary::NITDevice::paramValueOf(std::string const & paramName) const", ...
    "MATLABName", "paramValueOf", ...
    "Description", "paramValueOf Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the current value of the parameter paramName in numeric format", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The current value is the value in the camera." + newline + ...
    " --- Start of C++ code --- double clock = dev->paramValueOf( ""PixelClock"" ); //Return the value in the camera let say 25.0" + newline + ...
    "  dev->setParamValueOf( ""PixelClock"", 50.0 );       //The new value is not yet sent to the camera" + newline + ...
    "  clock =  dev->paramValueOf( ""PixelClock"" );       //Return the value in the camera which is allways 25.0" + newline + ...
    "  dev->updateConfig();                              //The new value is sent to the camera" + newline + ...
    "  clock =  dev->paramValueOf( ""PixelClock"" );       //Return the value in the camera which now 50.0 --- End of C++ code ---" + newline + ...
    " For parameters where the numeric format have a meaning, the returned value is the current value." + newline + ...
    " --- Start of C++ code --- double expo = dev->paramValueOf( ""ExposureTime"" ); //can return 200.0 for example --- End of C++ code ---" + newline + ...
    " For parameters who are enumerations, the return value is the index of the enumeration." + newline + ...
    " --- Start of C++ code --- unsigned int current_mode = dev->paramValueOf( ""Mode"" ); //can return 0 if capture mode is 'Global Shutter' --- End of C++ code ---"); % Modify help description values as needed.
defineArgument(paramValueOfDefinition, "paramName", "string", "input", "Description", "paramName For a list of available parameters see the page corresponding to your camera.");
defineOutput(paramValueOfDefinition, "RetVal", "double");
validate(paramValueOfDefinition);

%% C++ class method |paramStrValueOf| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: std::string NITLibrary::NITDevice::paramStrValueOf(std::string const & paramName) const

paramStrValueOfDefinition = addMethod(NITDeviceDefinition, ...
    "std::string NITLibrary::NITDevice::paramStrValueOf(std::string const & paramName) const", ...
    "MATLABName", "paramStrValueOf", ...
    "Description", "paramStrValueOf Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the current value of the parameter paramName in string format", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The current value is the value in the camera." + newline + ...
    " --- Start of C++ code --- std::string clock = dev->paramStrValueOf( ""PixelClock"" ); //Return the value in the camera let say ""25MHz""" + newline + ...
    "  dev->setParamValueOf( ""PixelClock"", ""50MHz"" );            //The new value is not yet sent to the camera" + newline + ...
    "  clock =  dev->paramStrValueOf( ""PixelClock"" );            //Return the value in the camera which is allways ""25MHz""" + newline + ...
    "  dev->updateConfig();                                      //The new value is sent to the camera" + newline + ...
    "  clock =  dev->paramStrValueOf( ""PixelClock"" );            //Return the value in the camera which now ""50MHz"" --- End of C++ code ---"); % Modify help description values as needed.
defineArgument(paramStrValueOfDefinition, "paramName", "string", "input", "Description", "paramName For a list of available parameters see the page corresponding to your camera.");
defineOutput(paramStrValueOfDefinition, "RetVal", "string");
validate(paramStrValueOfDefinition);

%% C++ class method |setParamValueOf| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: NITLibrary::NITDevice & NITLibrary::NITDevice::setParamValueOf(std::string const & paramName,unsigned int value)

setParamValueOfDefinition = addMethod(NITDeviceDefinition, ...
    "NITLibrary::NITDevice & NITLibrary::NITDevice::setParamValueOf(std::string const & paramName,unsigned int value)", ...
    "MATLABName", "setParamValueOf", ...
    "Description", "setParamValueOf Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Prepare to change the current value of the parameter paramName in unsigned int numeric format", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "This form of the function apply to parameters where unsigned int values have a meaning like 'Number of Column'.\n" + newline + ...
    "The change is sent to the camera on the next call to NITDevice::updateConfig().\n" + newline + ...
    "For some parameters the change may induce modifications of other parameters.\n" + newline + ...
    "The return value permit to chain calls.\n" + newline + ...
    "USB: The parameter is sent to the camera on the next call to updateConfig().\n" + newline + ...
    "GIGE: The parameter is sent to the camera immediatly.\n" + newline + ...
    "--- Start of C++ code --- dev->setParamValueOf( ""OneParameter"", OneValue ).setParamValueOf( ""AnotherParameter"", ""anotherValue"" ).updateConfig(); --- End of C++ code ---" + newline + ...
    "Numeric value as to be desambiguated.\n" + newline + ...
    "--- Start of C++ code --- dev->setParamValueOf( ""OneParameter"", 1 ) //ambiguous" + newline + ...
    "dev->setParamValueOf( ""OneParameter"", 1u ).dev->setParamValueOf( ""OneParameter"", (unsigned int)1 ) //unambiguous --- End of C++ code ---"); % Modify help description values as needed.
defineArgument(setParamValueOfDefinition, "paramName", "string", "input", "Description", "paramName For a list of available parameters see the page corresponding to your camera.");
defineArgument(setParamValueOfDefinition, "value", "uint32", "Description", "value The new value to apply.");
defineOutput(setParamValueOfDefinition, "RetVal", "clib.NITCam.NITLibrary.NITDevice", "Description", "this");
validate(setParamValueOfDefinition);

%% C++ class method |setParamValueOf| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: NITLibrary::NITDevice & NITLibrary::NITDevice::setParamValueOf(std::string const & paramName,double value)

setParamValueOfDefinition = addMethod(NITDeviceDefinition, ...
    "NITLibrary::NITDevice & NITLibrary::NITDevice::setParamValueOf(std::string const & paramName,double value)", ...
    "MATLABName", "setParamValueOf", ...
    "Description", "setParamValueOf Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Prepare to change the current value of the parameter paramName in double format", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "This form of the function apply to parameters where double values have a meaning like 'Pixel Clock'.\n" + newline + ...
    "The change is sent to the camera on the next call to NITDevice::updateConfig().\n" + newline + ...
    "For some parameters the change may induce modifications of other parameters.\n" + newline + ...
    "The return value permit to chain calls" + newline + ...
    "USB: The parameter is sent to the camera on the next call to updateConfig().\n" + newline + ...
    "GIGE: The parameter is sent to the camera immediatly.\n" + newline + ...
    "--- Start of C++ code --- dev->setParamValueOf( ""OneParameter"", OneValue ).setParamValueOf( ""AnotherParameter"", ""anotherValue"" ).updateConfig(); --- End of C++ code ---" + newline + ...
    "Numeric value as to be desambiguated.\n" + newline + ...
    "--- Start of C++ code --- dev->setParamValueOf( ""OneParameter"", 1 ) //ambiguous" + newline + ...
    "dev->setParamValueOf( ""OneParameter"", 1.0 ).dev->setParamValueOf( ""OneParameter"", (double)1 ) //unambiguous --- End of C++ code ---"); % Modify help description values as needed.
defineArgument(setParamValueOfDefinition, "paramName", "string", "input", "Description", "paramName For a list of available parameters see the page corresponding to your camera.");
defineArgument(setParamValueOfDefinition, "value", "double", "Description", "value The new value to apply.");
defineOutput(setParamValueOfDefinition, "RetVal", "clib.NITCam.NITLibrary.NITDevice", "Description", "this");
validate(setParamValueOfDefinition);

%% C++ class method |setParamValueOf| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: NITLibrary::NITDevice & NITLibrary::NITDevice::setParamValueOf(std::string const & paramName,std::string const & value)

setParamValueOfDefinition = addMethod(NITDeviceDefinition, ...
    "NITLibrary::NITDevice & NITLibrary::NITDevice::setParamValueOf(std::string const & paramName,std::string const & value)", ...
    "MATLABName", "setParamValueOf", ...
    "Description", "setParamValueOf Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Prepare to change the current value of the parameter paramName in string format", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "This form of the function apply to all parameters.\n" + newline + ...
    "The change is sent to the camera on the next call to NITDevice::updateConfig().\n" + newline + ...
    "For some parameters the change may induce modifications of other parameters.\n" + newline + ...
    "The return value permit to chain calls." + newline + ...
    "--- Start of C++ code --- dev->setParamValueOf( ""OneParameter"", OneValue ).setParamValueOf( ""AnotherParameter"", ""anotherValue"" ).updateConfig(); --- End of C++ code ---"); % Modify help description values as needed.
defineArgument(setParamValueOfDefinition, "paramName", "string", "input", "Description", "paramName For a list of available parameters see the page corresponding to your camera.");
defineArgument(setParamValueOfDefinition, "value", "string", "input", "Description", "value The new value to apply.");
defineOutput(setParamValueOfDefinition, "RetVal", "clib.NITCam.NITLibrary.NITDevice", "Description", "this");
validate(setParamValueOfDefinition);

%% C++ class method |updateConfig| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::updateConfig()

updateConfigDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::updateConfig()", ...
    "MATLABName", "updateConfig", ...
    "Description", "updateConfig Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Call the NITConfigObserver functions to notify the parameter changes", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "USB: Send the changed parameters to the camera." + newline + ...
    "\emit NITConfigObserver::onParamChanged for all changed parameters\n" + newline + ...
    "NITConfigObserver::onParamRangeChanged if needed\n" + newline + ...
    "NITConfigObserver::onFpsChanged if needed\n" + newline + ...
    "NITConfigObserver::onFpsRangeChanged if needed\n"); % Modify help description values as needed.
validate(updateConfigDefinition);

%% C++ class method |start| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::start()

startDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::start()", ...
    "MATLABName", "start", ...
    "Description", "start Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Start the capture", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The streaming run until NITDevice::stop() is called." + newline + ...
    "" + newline + ...
    "\emit NITConfigObserver::onNewFrame() For each received frame" + newline + ...
    "\threading The capture don't run in the current thread" + newline + ...
    "\throw NITException if the streaming is currently running"); % Modify help description values as needed.
validate(startDefinition);

%% C++ class method |captureNFrames| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::captureNFrames(size_t n,bool error_increment_count = 0)

captureNFramesDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::captureNFrames(size_t n,bool error_increment_count = 0)", ...
    "MATLABName", "captureNFrames", ...
    "Description", "captureNFrames Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Start the capture until n frames are captured", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The streaming stop automatically when the number of frames has been captured." + newline + ...
    "This function must be coupled with NITDevice::waitEndCapture()" + newline + ...
    "--- Start of C++ code --- dev->captureNFrames( 10 );" + newline + ...
    " dev->waitEndCapture(); --- End of C++ code ---"); % Modify help description values as needed.
defineArgument(captureNFramesDefinition, "n", "uint64", "Description", "n The number of frames to capture");
defineArgument(captureNFramesDefinition, "error_increment_count", "logical", "Description", "error_increment_count If false a dropped frame don't increment the counter" + newline + ...
    "\emit NITConfigObserver::onNewFrame() For each received frame" + newline + ...
    "\threading The capture don't run in the current thread");
validate(captureNFramesDefinition);

%% C++ class method |captureForDuration| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::captureForDuration(unsigned long milliseconds)

captureForDurationDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::captureForDuration(unsigned long milliseconds)", ...
    "MATLABName", "captureForDuration", ...
    "Description", "captureForDuration Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Start the capture for a duration", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "The streaming stop automatically when the time has elapsed." + newline + ...
    "This function must be coupled with NITDevice::waitEndCapture()" + newline + ...
    "--- Start of C++ code --- dev->captureForDuration( 1000 ); //Capture for 1 second" + newline + ...
    " dev->waitEndCapture(); --- End of C++ code ---"); % Modify help description values as needed.
defineArgument(captureForDurationDefinition, "milliseconds", "uint32", "Description", "milliseconds The number of milliseconds to capture" + newline + ...
    "\emit NITConfigObserver::onNewFrame() For each received frame" + newline + ...
    "\threading The capture don't run in the current thread" + newline + ...
    "\throw NITException if the streaming is currently running");
validate(captureForDurationDefinition);

%% C++ class method |stop| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::stop()

stopDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::stop()", ...
    "MATLABName", "stop", ...
    "Description", "stop Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Stop the capture"); % Modify help description values as needed.
validate(stopDefinition);

%% C++ class method |waitEndCapture| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: bool NITLibrary::NITDevice::waitEndCapture(int timeout = -1)

waitEndCaptureDefinition = addMethod(NITDeviceDefinition, ...
    "bool NITLibrary::NITDevice::waitEndCapture(int timeout = -1)", ...
    "MATLABName", "waitEndCapture", ...
    "Description", "waitEndCapture Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Block the current thread until the capture is done", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "This function is coupled with NITDevice::captureNFrames() or NITDevice::captureForDuration()" + newline + ...
    "--- Start of C++ code --- dev->captureForDuration( 1000 ); //Capture for 1 second" + newline + ...
    " dev->waitEndCapture(); --- End of C++ code ---"); % Modify help description values as needed.
defineArgument(waitEndCaptureDefinition, "timeout", "int32", "Description", "timeout The maximum number of milliseconds to wait for the end of capture.\n" + newline + ...
    "If -1, the function wait until the job is done.\n" + newline + ...
    "If a timeout occurs, the streaming is stopped.");
defineOutput(waitEndCaptureDefinition, "RetVal", "logical", "Description", "false if the function timed out, else true if the job was honored");
validate(waitEndCaptureDefinition);

%% C++ class method |computeLowPoint| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::computeLowPoint(bool preserve_gain)

computeLowPointDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::computeLowPoint(bool preserve_gain)", ...
    "MATLABName", "computeLowPoint", ...
    "Description", "computeLowPoint Method of C++ class NITLibrary::NITDevice."); % Modify help description values as needed.
defineArgument(computeLowPointDefinition, "preserve_gain", "logical");
validate(computeLowPointDefinition);

%% C++ class method |computeHighPoint| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::computeHighPoint()

computeHighPointDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::computeHighPoint()", ...
    "MATLABName", "computeHighPoint", ...
    "Description", "computeHighPoint Method of C++ class NITLibrary::NITDevice."); % Modify help description values as needed.
validate(computeHighPointDefinition);

%% C++ class method |generateNuc| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: void NITLibrary::NITDevice::generateNuc(std::string const & filename)

generateNucDefinition = addMethod(NITDeviceDefinition, ...
    "void NITLibrary::NITDevice::generateNuc(std::string const & filename)", ...
    "MATLABName", "generateNuc", ...
    "Description", "generateNuc Method of C++ class NITLibrary::NITDevice."); % Modify help description values as needed.
defineArgument(generateNucDefinition, "filename", "string", "input");
validate(generateNucDefinition);

%% C++ class method |getCurrentNucPath| for C++ class |NITLibrary::NITDevice| 
% C++ Signature: std::string NITLibrary::NITDevice::getCurrentNucPath() const

getCurrentNucPathDefinition = addMethod(NITDeviceDefinition, ...
    "std::string NITLibrary::NITDevice::getCurrentNucPath() const", ...
    "MATLABName", "getCurrentNucPath", ...
    "Description", "getCurrentNucPath Method of C++ class NITLibrary::NITDevice." + newline + ...
    "Return the current path of the NUC", ...
    "DetailedDescription", "This content is from the external library documentation."); % Modify help description values as needed.
defineOutput(getCurrentNucPathDefinition, "RetVal", "string", "Description", "Return the current path of the NUC");
validate(getCurrentNucPathDefinition);

%% Validate the library definition
validate(libDef);

end
